{
    "swagger": "2.0",
    "info": {
      "title": "Test API",
      "description": "A test API for local testing of the OpenAPI Analyzer",
      "version": "1.0.0",
      "contact": {
        "name": "API Support",
        "email": "support@example.com"
      },
      "license": {
        "name": "MIT",
        "url": "https://opensource.org/licenses/MIT"
      }
    },
    "host": "api.example.com",
    "basePath": "/v1",
    "schemes": ["https"],
    "consumes": ["application/json"],
    "produces": ["application/json"],
    "paths": {
      "/users": {
        "get": {
          "summary": "Get all users",
          "description": "Retrieve a list of all users in the systems",
          "operationId": "getUsers",
          "tags": ["users"],
          "parameters": [
            {
              "name": "limit",
              "in": "query",
              "description": "Maximum number of users to return",
              "required": false,
              "type": "integer",
              "default": 10,
              "minimum": 1,
              "maximum": 100
            },
            {
              "name": "offset",
              "in": "query",
              "description": "Number of users to skip",
              "required": false,
              "type": "integer",
              "default": 0,
              "minimum": 0
            }
          ],
          "responses": {
            "200": {
              "description": "Successful response",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/User"
                }
              },
              "headers": {
                "X-Total-Count": {
                  "description": "Total number of users",
                  "type": "integer"
                }
              }
            },
            "400": {
              "description": "Bad request - invalid parameters"
            },
            "500": {
              "description": "Internal server error"
            }
          }
        },
        "post": {
          "summary": "Create a new user",
          "description": "Create a new user in the system",
          "operationId": "createUser",
          "tags": ["users"],
          "parameters": [
            {
              "name": "user",
              "in": "body",
              "description": "User object to create",
              "required": true,
              "schema": {
                "$ref": "#/definitions/UserInput"
              }
            }
          ],
          "responses": {
            "201": {
              "description": "User created successfully",
              "schema": {
                "$ref": "#/definitions/User"
              }
            },
            "400": {
              "description": "Bad request - invalid user data"
            },
            "409": {
              "description": "Conflict - user already exists"
            },
            "500": {
              "description": "Internal server error"
            }
          }
        }
      },
      "/users/{id}": {
        "get": {
          "summary": "Get user by ID",
          "description": "Retrieve a specific user by their ID",
          "operationId": "getUserById",
          "tags": ["users"],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "User ID",
              "required": true,
              "type": "integer",
              "format": "int64"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful response",
              "schema": {
                "$ref": "#/definitions/User"
              }
            },
            "404": {
              "description": "User not found"
            },
            "500": {
              "description": "Internal server error"
            }
          }
        },
        "put": {
          "summary": "Update user",
          "description": "Update an existing user",
          "operationId": "updateUser",
          "tags": ["users"],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "User ID",
              "required": true,
              "type": "integer",
              "format": "int64"
            },
            {
              "name": "user",
              "in": "body",
              "description": "Updated user object",
              "required": true,
              "schema": {
                "$ref": "#/definitions/UserInput"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "User updated successfully",
              "schema": {
                "$ref": "#/definitions/User"
              }
            },
            "400": {
              "description": "Bad request - invalid user data"
            },
            "404": {
              "description": "User not found"
            },
            "500": {
              "description": "Internal server error"
            }
          }
        },
        "delete": {
          "summary": "Delete user",
          "description": "Delete a user from the system",
          "operationId": "deleteUser",
          "tags": ["users"],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "User ID",
              "required": true,
              "type": "integer",
              "format": "int64"
            }
          ],
          "responses": {
            "204": {
              "description": "User deleted successfully"
            },
            "404": {
              "description": "User not found"
            },
            "500": {
              "description": "Internal server error"
            }
          }
        }
      }
    },
    "definitions": {
      "User": {
        "type": "object",
        "required": ["id", "name", "email"],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Unique identifier for the user"
          },
          "name": {
            "type": "string",
            "description": "User's full name",
            "minLength": 1,
            "maxLength": 100
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "User's email address"
          },
          "age": {
            "type": "integer",
            "description": "User's age",
            "minimum": 0,
            "maximum": 150
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "When the user was created"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "When the user was last updated"
          }
        }
      },
      "UserInput": {
        "type": "object",
        "required": ["name", "email"],
        "properties": {
          "name": {
            "type": "string",
            "description": "User's full name",
            "minLength": 1,
            "maxLength": 100
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "User's email address"
          },
          "age": {
            "type": "integer",
            "description": "User's age",
            "minimum": 0,
            "maximum": 150
          }
        }
      },
      "Error": {
        "type": "object",
        "required": ["code", "message"],
        "properties": {
          "code": {
            "type": "integer",
            "description": "Error code"
          },
          "message": {
            "type": "string",
            "description": "Error message"
          },
          "details": {
            "type": "string",
            "description": "Additional error details"
          }
        }
      }
    },
    "securityDefinitions": {
      "ApiKeyAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "X-API-Key",
        "description": "API key for authentication"
      },
      "BearerAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "Authorization",
        "description": "Bearer token for authentication"
      }
    },
    "security": [
      {
        "ApiKeyAuth": []
      }
    ],
    "tags": [
      {
        "name": "users",
        "description": "User management operations"
      }
    ]
  }
  
