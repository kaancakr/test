name: OpenAPI Analysis

on:
  push:
    branches: [ main, develop ]
    paths:
      - '**/*.json'
      - '**/*.yaml'
      - '**/*.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - '**/*.json'
      - '**/*.yaml'
      - '**/*.yml'
  workflow_dispatch:

jobs:
  analyze-openapi:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: OpenAPI Analyzer
      id: analyze
      uses: ApyGuard/apyguard_openapi_analysis@main
      with:
        # Path to your OpenAPI/Swagger specification file
        file: test-swagger.json
        
        # Output format (json or summary)
        output_format: json
        
    - name: Save analysis results
      run: |
        echo '${{ steps.analyze.outputs.analysis }}' > analysis-results.json
        
    - name: Upload analysis results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: openapi-analysis-results
        path: analysis-results.json
        retention-days: 30
        
    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const analysis = JSON.parse('${{ steps.analyze.outputs.analysis }}');
          const comment = `## 🔍 OpenAPI Analysis Results
          
          **Valid**: ${analysis.is_valid ? '✅' : '❌'}
          **Suggestions**: ${analysis.suggestions ? analysis.suggestions.length : 0}
          **Operations**: ${analysis.summary ? analysis.summary.operations_count : 0}
          **Paths**: ${analysis.summary ? analysis.summary.paths_count : 0}
          **Schemas**: ${analysis.summary ? analysis.summary.schemas_count : 0}
          
          ${analysis.suggestions && analysis.suggestions.length > 0 ? 
            `### 📋 Top Suggestions:\n\n${analysis.suggestions.slice(0, 5).map(s => `- ${s}`).join('\n')}` : 
            '### ✅ No suggestions found! Your OpenAPI specification looks great! 🎉'
          }
          
          Detailed results are available in the workflow artifacts.`;
            
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
